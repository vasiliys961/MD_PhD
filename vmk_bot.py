from dotenv import load_dotenv
load_dotenv()

import os
import json
from datetime import datetime
from telegram import Update, Document
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from openai import OpenAI
import fitz

# üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_API_BASE = os.getenv("OPENAI_API_BASE", "https://openrouter.ai/api/v1").strip()
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "").strip()
PORT = int(os.getenv("PORT", "8080"))
MODEL = "openai/gpt-4o"

# ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
print("=" * 50)
print("ENVIRONMENT VARIABLES DIAGNOSTIC")
print("=" * 50)
print(f"TELEGRAM_TOKEN: {'‚úì' if TELEGRAM_TOKEN else '‚úó'} (len: {len(TELEGRAM_TOKEN)})")
print(f"OPENAI_API_KEY: {'‚úì' if OPENAI_API_KEY else '‚úó'} (len: {len(OPENAI_API_KEY)})")
print(f"WEBHOOK_URL: {WEBHOOK_URL}")
print(f"PORT: {PORT}")
print("=" * 50)

# üåê OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(
    api_key=OPENAI_API_KEY,
    base_url=OPENAI_API_BASE
)

# üíæ –ü–∞–ø–∫–∏
os.makedirs("logs", exist_ok=True)
os.makedirs("uploads", exist_ok=True)

# üí¨ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
chat_histories = {}
summaries = {}

# üß† system-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (—Å–æ–∫—Ä–∞—â—ë–Ω–Ω–∞—è)
system_instruction = "–í—ã ‚Äî –í–ú–ö, –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —Ä—É—Å—Å–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—É."

# üì• –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üß† –ü—Ä–∏–≤–µ—Ç! –Ø –í–ú–ö. –ó–∞–¥–∞–π—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF/TXT —Ñ–∞–π–ª.")

# üìÇ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document: Document = update.message.document
    file_name = document.file_name.lower()
    file_path = os.path.join("uploads", file_name)
    await context.bot.get_file(document.file_id).download_to_drive(file_path)

    try:
        if file_name.endswith(".pdf"):
            doc = fitz.open(file_path)
            file_text = "\n".join([page.get_text() for page in doc])
        elif file_name.endswith(".txt"):
            with open(file_path, "r", encoding="utf-8") as f:
                file_text = f.read()
        else:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –¢–æ–ª—å–∫–æ PDF –∏–ª–∏ TXT.")
            return

        await process_text(update, context, f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:\n{file_text[:3000]}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    finally:
        os.remove(file_path)

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await process_text(update, context, update.message.text)

# üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –¥–∏–∞–ª–æ–≥ —Å OpenAI
async def process_text(update: Update, context: ContextTypes.DEFAULT_TYPE, user_message: str):
    chat_id = update.effective_chat.id
    await update.message.chat.send_action("typing")

    if chat_id not in chat_histories:
        chat_histories[chat_id] = []
    chat_histories[chat_id].append({"role": "user", "content": user_message})

    if len(chat_histories[chat_id]) >= 6:
        summaries[chat_id] = summarize_history(chat_histories[chat_id])
        chat_histories[chat_id] = chat_histories[chat_id][-2:]

    messages = [{"role": "system", "content": system_instruction}]
    if chat_id in summaries:
        messages.append({"role": "system", "content": f"–†–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞:\n{summaries[chat_id]}"})
    messages += chat_histories[chat_id]

    try:
        response = client.chat.completions.create(
            model=MODEL,
            messages=messages,
            temperature=0.3
        )
        reply = response.choices[0].message.content
        chat_histories[chat_id].append({"role": "assistant", "content": reply})

        for chunk in [reply[i:i+4096] for i in range(0, len(reply), 4096)]:
            await update.message.reply_text(chunk)

        save_log(chat_id, user_message, reply)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI: {e}")

# üß† –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞
def summarize_history(messages: list) -> str:
    try:
        summary_prompt = [
            {"role": "system", "content": "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞ –º–µ–∂–¥—É –≤—Ä–∞—á–æ–º –∏ AI."},
            {"role": "user", "content": "\n".join([f"{m['role']}: {m['content']}" for m in messages])}
        ]
        response = client.chat.completions.create(
            model=MODEL,
            messages=summary_prompt,
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except:
        return "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å."

# üíæ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def save_log(chat_id, user_text, bot_response):
    log = {
        "timestamp": datetime.utcnow().isoformat(),
        "chat_id": chat_id,
        "user_text": user_text,
        "bot_response": bot_response
    }
    with open(f"logs/{chat_id}.json", "a", encoding="utf-8") as f:
        f.write(json.dumps(log, ensure_ascii=False) + "\n")

# üöÄ –ó–∞–ø—É—Å–∫ Webhook
def main():
    if not TELEGRAM_TOKEN or not WEBHOOK_URL:
        raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TELEGRAM_TOKEN –∏–ª–∏ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω—ã")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    print(f"üöÄ –ó–∞–ø—É—Å–∫ Webhook –Ω–∞ {WEBHOOK_URL}:{PORT}")

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
